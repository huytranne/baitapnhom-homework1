# -*- coding: utf-8 -*-
"""bai2-done

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zAtyTPXcuZVa8g1thaPnzbZIZ93SrFed
"""

min_support = 100

input_path = 'browsing.txt'
dataset = []
with open(input_path, 'r') as f:
    for line in f:
        dataset.append(sorted(set(line.strip().split(' '))))

print('Number of transactions: {}'.format(len(dataset)))

singles_support = {}

for transaction in dataset:
    for item in transaction:
        singles_support[item] = singles_support.get(item, 0) + 1

singles_support = {k: v for k, v in singles_support.items() if v >= min_support}

print('Number of frequent items: {}'.format(len(singles_support)))

double_support = {}
for transaction in dataset:
    for i in range(len(transaction)):
        if transaction[i] in singles_support:
            for j in range(i):
                if transaction[j] in singles_support:

                    double_support[(transaction[j], transaction[i])] = double_support.get((transaction[j], transaction[i]), 0) + 1

double_support = {k: v for k, v in double_support.items() if v >= min_support}

print('Number of frequent double items: {}'.format(len(double_support)))

doubles_conf = []
for double, support in double_support.items():
    x, y = double
    xy_conf = support / singles_support[x]
    yx_conf = support / singles_support[y]
    doubles_conf.extend([(((x), y), xy_conf), 
                         (((y), x), yx_conf)])

doubles_conf = sorted(doubles_conf, key=lambda x: (-x[1], x[0][0][0]))
print('Top 10 association rules:')
for i in range(10):
    print('conf({} -> {}) = {:.3f}'.format(doubles_conf[i][0][0], doubles_conf[i][0][1], doubles_conf[i][1]))

triple_support = {}
for transaction in dataset:
    for i in range(len(transaction)):
        if transaction[i] not in singles_support:
            continue
        for j in range(i):
            if transaction[j] not in singles_support:
                continue
            if (transaction[j], transaction[i]) not in double_support:
                continue
            for k in range(j):
                if transaction[k] not in singles_support:
                    continue
                if (transaction[k], transaction[j]) not in double_support:
                    continue
                if (transaction[k], transaction[i]) not in double_support:
                    continue
                triple_support[(transaction[k], transaction[j], transaction[i])] = triple_support.get((transaction[k], transaction[j], transaction[i]), 0) + 1

triple_support = {k: v for k, v in triple_support.items() if v >= min_support}

print('Number of frequent triple items: {}'.format(len(triple_support)))

triples_conf = []
for triple, support in triple_support.items():
    x, y, z = triple
    xy_z_conf = support / double_support[(x, y)]
    xz_y_conf = support / double_support[(x, z)]
    yz_x_conf = support / double_support[(y, z)]
    triples_conf.extend([(((x, y), z), xy_z_conf), 
                         (((x, z), y), xz_y_conf), 
                         (((y, z), x), yz_x_conf)])

triples_conf = sorted(triples_conf, key=lambda x: (-x[1], x[0][0][0], x[0][0][1]))

print('Top 10 association rules:')
for i in range(10):
    print(f"conf({{{triples_conf[i][0][0][0]}, {triples_conf[i][0][0][1]}}} -> {triples_conf[i][0][1]}) = {triples_conf[i][1]:.3f}")